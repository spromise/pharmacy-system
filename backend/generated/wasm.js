
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PatientScalarFieldEnum = {
  visit_id: 'visit_id',
  name: 'name',
  gender: 'gender',
  contact: 'contact',
  first_visit_date: 'first_visit_date',
  medical_history: 'medical_history'
};

exports.Prisma.DoctorScalarFieldEnum = {
  doctor_id: 'doctor_id',
  name: 'name',
  department: 'department'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  prescription_id: 'prescription_id',
  patient_visit_id: 'patient_visit_id',
  doctor_id: 'doctor_id',
  create_time: 'create_time',
  status: 'status',
  diagnosis: 'diagnosis',
  remarks: 'remarks',
  total_amount: 'total_amount'
};

exports.Prisma.PrescriptionDetailScalarFieldEnum = {
  prescription_id: 'prescription_id',
  drug_code: 'drug_code',
  drug_name: 'drug_name',
  unit_price: 'unit_price',
  quantity: 'quantity',
  usage_instruction: 'usage_instruction'
};

exports.Prisma.DrugScalarFieldEnum = {
  drug_code: 'drug_code',
  generic_name: 'generic_name',
  brand_name: 'brand_name',
  dosage_form: 'dosage_form',
  specification: 'specification',
  manufacturer: 'manufacturer',
  unit_price: 'unit_price'
};

exports.Prisma.InventoryScalarFieldEnum = {
  inventory_id: 'inventory_id',
  drug_code: 'drug_code',
  batch_number: 'batch_number',
  stock_quantity: 'stock_quantity',
  expiration_date: 'expiration_date',
  alert_threshold: 'alert_threshold',
  last_inbound_time: 'last_inbound_time',
  last_outbound_time: 'last_outbound_time'
};

exports.Prisma.InboundScalarFieldEnum = {
  inbound_id: 'inbound_id',
  drug_code: 'drug_code',
  batch_number: 'batch_number',
  quantity: 'quantity',
  inbound_time: 'inbound_time',
  operator_id: 'operator_id'
};

exports.Prisma.OutboundScalarFieldEnum = {
  outbound_id: 'outbound_id',
  drug_code: 'drug_code',
  batch_number: 'batch_number',
  quantity: 'quantity',
  prescription_id: 'prescription_id',
  outbound_type: 'outbound_type',
  outbound_time: 'outbound_time'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  price_id: 'price_id',
  drug_code: 'drug_code',
  old_price: 'old_price',
  new_price: 'new_price',
  effective_date: 'effective_date',
  operator_id: 'operator_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.PatientOrderByRelevanceFieldEnum = {
  visit_id: 'visit_id',
  name: 'name',
  contact: 'contact',
  medical_history: 'medical_history'
};

exports.Prisma.DoctorOrderByRelevanceFieldEnum = {
  name: 'name',
  department: 'department'
};

exports.Prisma.PrescriptionOrderByRelevanceFieldEnum = {
  patient_visit_id: 'patient_visit_id',
  diagnosis: 'diagnosis',
  remarks: 'remarks'
};

exports.Prisma.PrescriptionDetailOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code',
  drug_name: 'drug_name',
  usage_instruction: 'usage_instruction'
};

exports.Prisma.DrugOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code',
  generic_name: 'generic_name',
  brand_name: 'brand_name',
  dosage_form: 'dosage_form',
  specification: 'specification',
  manufacturer: 'manufacturer'
};

exports.Prisma.InventoryOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code',
  batch_number: 'batch_number'
};

exports.Prisma.InboundOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code',
  batch_number: 'batch_number'
};

exports.Prisma.OutboundOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code',
  batch_number: 'batch_number',
  outbound_type: 'outbound_type'
};

exports.Prisma.PriceHistoryOrderByRelevanceFieldEnum = {
  drug_code: 'drug_code'
};
exports.Gender = exports.$Enums.Gender = {
  男: '男',
  女: '女'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  有效: '有效',
  已作废: '已作废',
  已审核: '已审核'
};

exports.Prisma.ModelName = {
  Patient: 'Patient',
  Doctor: 'Doctor',
  Prescription: 'Prescription',
  PrescriptionDetail: 'PrescriptionDetail',
  Drug: 'Drug',
  Inventory: 'Inventory',
  Inbound: 'Inbound',
  Outbound: 'Outbound',
  PriceHistory: 'PriceHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
