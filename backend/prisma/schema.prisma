// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// ---------------------------
// 患者信息表
// ---------------------------
model Patient {
  visit_id         String   @id @db.VarChar(12) // 就诊流水号（格式：YYYYMMDD0001）
  name             String   @db.VarChar(100) // 患者姓名
  gender           Gender // 性别
  contact          String?  @db.VarChar(50) // 联系方式
  first_visit_date DateTime // 首次就诊日期
  medical_history  String?  @db.Text // 既往病史

  // 关联处方
  prescriptions Prescription[]

  @@map("patients")
}

enum Gender {
  男
  女
}

// ---------------------------
// 医生信息表
// ---------------------------
model Doctor {
  doctor_id  Int    @id @default(autoincrement()) // 医生ID（自增主键）
  name       String @db.VarChar(10) // 医生姓名
  department String @db.VarChar(20) // 所属科室（如内科、外科）

  // 关联处方
  prescriptions Prescription[]

  @@map("doctors")
}

// ---------------------------
// 处方表（核心医疗文书）
// ---------------------------
model Prescription {
  prescription_id     Int                  @id @default(autoincrement()) // 处方ID（自增主键）
  patient_visit_id    String // 关联患者就诊流水号
  doctor_id           Int // 开方医生ID
  create_time         DateTime             @default(now()) // 处方开具时间
  status              PrescriptionStatus   @default(有效) // 状态（有效/已作废/已审核）
  diagnosis           String?              @db.VarChar(500) // 临床诊断，增加长度
  remarks             String?              @db.Text // 医嘱备注
  total_amount        Float                @default(0.0) // 处方总金额（快照）
  // 外键关联
  patient             Patient              @relation(fields: [patient_visit_id], references: [visit_id], onDelete: Restrict, onUpdate: Cascade)
  doctor              Doctor               @relation(fields: [doctor_id], references: [doctor_id], onDelete: Restrict, onUpdate: Cascade)
  prescriptionDetails PrescriptionDetail[] // 处方明细
  outbounds           Outbound[]

  @@index([patient_visit_id]) // 添加索引
  @@index([doctor_id]) // 添加索引
  @@map("prescriptions")
}

enum PrescriptionStatus {
  有效
  已作废
  已审核
}

// ---------------------------
// 处方明细表（药品与处方关联）
// ---------------------------
model PrescriptionDetail {
  prescription_id   Int // 处方ID
  drug_code         String // 药品本位码
  drug_name         String       @db.VarChar(100) // 冗余存储药品名称（快照）
  unit_price        Float // 药品单价（价格快照）
  quantity          Int          @default(1) // 数量（如2盒/30片）
  usage_instruction String       @db.VarChar(200) // 用法用量（如“每日3次，每次1片”）
  prescription      Prescription @relation(fields: [prescription_id], references: [prescription_id], onDelete: Cascade, onUpdate: Cascade)
  drug              Drug         @relation(fields: [drug_code], references: [drug_code], onDelete: Restrict, onUpdate: Cascade)

  // 复合主键与关联
  @@id([prescription_id, drug_code])
  @@map("prescription_details")
}

// ---------------------------
// 药品核心信息表
// ---------------------------
model Drug {
  drug_code     String  @id @db.Char(14) // 药品本位码（国家统一编码）
  generic_name  String  @db.VarChar(100) // 药品通用名称（如“阿莫西林”）
  brand_name    String? @unique @db.VarChar(100) // 商品名（唯一，如“信立克”）
  dosage_form   String  @db.VarChar(50) // 剂型（用户自由输入，如“胶囊剂”）
  specification String? @db.VarChar(500) // 规格（复合成分用*分隔）
  manufacturer  String? @db.VarChar(100) // 生产厂家
  unit_price    Float? // 当前售价，改为可选字段

  // 关联表
  inventories         Inventory[]
  inbounds            Inbound[]
  outbounds           Outbound[]
  priceHistories      PriceHistory[]
  prescriptionDetails PrescriptionDetail[]
}

// ---------------------------
// 库存管理表
// ---------------------------
model Inventory {
  inventory_id       Int       @id @default(autoincrement())
  drug_code          String    @db.Char(14) // 关联药品本位码
  batch_number       String    @db.VarChar(50) // 批次号（格式：YYYYMMDD-001）
  stock_quantity     Int       @default(0) // 当前库存量
  expiration_date    DateTime // 有效期
  alert_threshold    Int       @default(50) // 库存预警阈值
  last_inbound_time  DateTime? // 最后入库时间
  last_outbound_time DateTime? // 最后出库时间
  drug               Drug      @relation(fields: [drug_code], references: [drug_code], onDelete: Restrict, onUpdate: Cascade)

  // 唯一性约束与关联
  @@unique([drug_code, batch_number])
  @@map("inventory")
}

// ---------------------------
// 入库管理表
// ---------------------------
model Inbound {
  inbound_id   Int      @id @default(autoincrement())
  drug_code    String   @db.Char(14) // 关联药品本位码
  batch_number String   @db.VarChar(50) // 批次号
  quantity     Int // 入库数量
  inbound_time DateTime @default(now()) // 入库时间
  operator_id  Int? // 操作员ID

  // 外键关联
  drug Drug @relation(fields: [drug_code], references: [drug_code], onDelete: Restrict, onUpdate: Cascade)

  @@map("inbound")
}

// ---------------------------
// 出库管理表
// ---------------------------
model Outbound {
  outbound_id     Int      @id @default(autoincrement())
  drug_code       String   @db.Char(14) // 关联药品本位码
  batch_number    String   @db.VarChar(50) // 批次号
  quantity        Int // 出库数量
  prescription_id Int? // 关联处方（若为处方药）
  outbound_type   String   @db.VarChar(20) // 出库类型（销售/调拨/退货）
  outbound_time   DateTime @default(now()) // 出库时间

  // 外键关联
  drug         Drug          @relation(fields: [drug_code], references: [drug_code], onDelete: Restrict, onUpdate: Cascade)
  prescription Prescription? @relation(fields: [prescription_id], references: [prescription_id], onDelete: SetNull, onUpdate: Cascade)

  @@map("outbound")
}

// ---------------------------
// 调价历史表
// ---------------------------
model PriceHistory {
  price_id       Int      @id @default(autoincrement())
  drug_code      String   @db.Char(14) // 关联药品本位码
  old_price      Float? // 原价格
  new_price      Float // 新价格
  effective_date DateTime // 生效日期
  operator_id    Int? // 操作员ID

  // 外键关联
  drug Drug @relation(fields: [drug_code], references: [drug_code], onDelete: Restrict, onUpdate: Cascade)

  @@map("price_history")
}
